#! /bin/zsh
# Author: Jazmin Ortiz
# Date: 06/10/15
#
# Description: This is a script that was written to rename the .csv files in
# the MS-Prodution directory to names that were more intuitive. Mainly this 
# would change the files to a naming convention that relied upon the 24 hr
# time system and remove the "24.hour." part of the name which is at the front
# of all of the names. Each .csv file would be renamed to have the naming
# convention server_specification.year-month-day.hour-minute.csv.

usage="Usage:
              -d <Directory> | This flag followed by the argument Directory
                               allows the user to specify the directory in 
                               which top run this script. If this flag is not
                               used then the script will be run in the current
                               directory. "

# This is a while loop to read in information given by the user of the
# script.

# This variable will be used to store the directory in which to run our script,
# it is initially set to the current directory for the case in which the user 
# does not specify a directory.
DIRECTORY=.
while true; do
  case $1 in
    -d ) shift 
         DIRECTORY=$1
         shift
         break
         ;;
  esac
done

# Checks to make sure that the user specified directory is a valid directory,
# if it is then it will cd to the valid directory. Otherwise exits the script 
# and prints out an error message. 
if [ -d $DIRECTORY ]
  then
  cd $DIRECTORY
else
  echo "The directory entered is not a valid directory. /n"
  echo $usage
  exit
fi

##########################################################################

# This takes in a filename and uses sed to remove the begining which contains
# 24hour and then changes the the order of the dates to
# year-month-day, then returns a filename with the changes.
function change_order file_to_change
{
  file_to_change=$1
    
  echo $file_to_change \
    | sed 's/24.\{0,1\}hour[- _ \.]\{0,1\}//I' \
    | sed 's/\([A-Z a-z _ .]*\)\([0-9][0-9]\)\(-\)\([0-9][0-9]\)\(-\)\([0-9]*\)/\1\6-\2-\4/' \

}

# This function takes in a filename, file_to_change and finds the correct 24
# time for file_to_change based upon whether this is a AM.csv file or a
# PM.csv file. This function returns 12 plus the current hr time if the file is a
# PM.csv file and will return the current hr time if this is a AM.csv file.
# Please note that this assumes that the [server_specifier] at the begining of
# the file name contains no numbers.
function get_hour_time file_to_change
{
  file_to_change=$1    
    
  # Finds the hour time of the file using sed and assigns it to
  # the variable hr_time.
  echo $file_to_change \
      | sed 's/\([A-Z a-z  _ \.]*[0-9 -]*\.\)\([0-9][0-9]\)\(.*\)/\2/' \
      | read hr_time

  # Checks if the given file is a PM.csv and if it is, adds 12 to the
  # variable hr_time.
  if [[ $file_to_change == *PM.*csv ]]
  then
    ((hr_time=$hr_time + 12))
  fi

  # Returns the value in the variable hr_time
  echo $hr_time
}

# This function takes in a file, file_to_change, and an hour time, correct_hr and
# returns a file name that has correct_hr in the place of what was previously
# in the hr position and removes any -PM or -AM .traces or multiple copies of
# .csv at the end of the file name so that the file name is of the form,
# [server_specifier].date.correct_hour.minutes.csv. Please note that
# that this assumes that the begining of the file [server_specifier] contains
# no numbers
function change_hour_time file_to_change correct_hour
{
  file_to_change=$1
  correct_hour=$2

  echo $file_to_change \
    | sed 's/\([A-Z a-z _]*\.[0-9 -]*\.\)\([0-9][0-9]\)\(-[0-9][0-9]\)\(.*\)/\1'$correct_hour'\3.csv/'
  
    
}

for file in *.csv
do
    # Rearranges the date to year-month-day and removes the 24Hour_ begining
    # of the file name and puts it in the variable.
    correct_date_file=$(change_order $file)
   
    # Finds the hour in the file and returns the correct hour in 24 hour time.
    correct_hour=$(get_hour_time $correct_date_file)
   
    # Creates the new file name using the $correct_date_file and the
    # correct_hour variable defined above.
    new_file_name=$(change_hour_time $correct_date_file $correct_hour)

    
    mv $file $new_file_name
done

 
